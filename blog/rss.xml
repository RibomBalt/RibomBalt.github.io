<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ribom's blogs Blog</title>
        <link>https://RibomBalt.github.io/blog</link>
        <description>Ribom's blogs Blog</description>
        <lastBuildDate>Fri, 16 May 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[关于WSL上玩Ollama把我C盘写满了的事]]></title>
            <link>https://RibomBalt.github.io/blog/2025/05/16/wsl-disk-move</link>
            <guid>https://RibomBalt.github.io/blog/2025/05/16/wsl-disk-move</guid>
            <pubDate>Fri, 16 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR<a href="https://ribombalt.github.io/blog/2025/05/16/wsl-disk-move#tldr" class="hash-link" aria-label="TL;DR的直接链接" title="TL;DR的直接链接">​</a></h2>
<ul>
<li>WSL的磁盘文件在C盘，我这里默认位置是<code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code></li>
<li>WSL磁盘空间会自动增长但不会收缩，可以用<a href="https://superuser.com/questions/1600749/how-to-change-the-maximum-size-of-the-disk-image-of-my-wsl2-distro" target="_blank" rel="noopener noreferrer">多种方法回收空间</a></li>
<li>把C盘写满了会报错退出。</li>
<li>可以用<code>wsl --manage Ubuntu-22.04 --move /d/WSL/Ubuntu-22.04</code>把WSL的磁盘文件移动到D盘。</li>
<li>也可以用<code>wsl --export Ubuntu-22.04 /d/WSL/Ubuntu-22.04.tar</code>导出到tar文件，然后用<code>wsl --import Ubuntu-22.04 /d/WSL/Ubuntu-22.04 /d/WSL/Ubuntu-22.04.tar</code>导入到D盘。</li>
</ul>
<!-- -->
<h2></h2>]]></content:encoded>
            <category>Linux</category>
            <category>AI</category>
        </item>
        <item>
            <title><![CDATA[网络共享打印机使用指南 - 以Fuji Xerox DocuPrint CM305 df为例]]></title>
            <link>https://RibomBalt.github.io/blog/2025/05/15/printer</link>
            <guid>https://RibomBalt.github.io/blog/2025/05/15/printer</guid>
            <pubDate>Thu, 15 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR;]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR;<a href="https://ribombalt.github.io/blog/2025/05/15/printer#tldr" class="hash-link" aria-label="TL;DR;的直接链接" title="TL;DR;的直接链接">​</a></h2>
<ul>
<li>这是介绍学校实验室打印机使用方法的教程。</li>
<li>需要直接看怎么添加打印机请直接跳转第2章。</li>
</ul>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-背景知识">1. 背景知识<a href="https://ribombalt.github.io/blog/2025/05/15/printer#1-%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86" class="hash-link" aria-label="1. 背景知识的直接链接" title="1. 背景知识的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="打印机一般知识">打印机一般知识<a href="https://ribombalt.github.io/blog/2025/05/15/printer#%E6%89%93%E5%8D%B0%E6%9C%BA%E4%B8%80%E8%88%AC%E7%9F%A5%E8%AF%86" class="hash-link" aria-label="打印机一般知识的直接链接" title="打印机一般知识的直接链接">​</a></h3>
<p>常见的网络打印协议：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Line_Printer_Daemon_protocol" target="_blank" rel="noopener noreferrer">LPD/LPR</a>: 全称为Line Printer Daemon/Line Printer Remote，是一种网络打印协议。一般用TCP515端口通信，一般需要一个打印机地址和一个打印队列名称。</li>
<li><a href="https://en.wikipedia.org/wiki/Internet_Printing_Protocol" target="_blank" rel="noopener noreferrer">IPP</a>: 全称为Internet Printing Protocol，是一种网络打印协议。一般用TCP631端口通信，支持多种打印机和打印机队列的设置。</li>
<li>Port 9100: 是一种纯文本的打印协议，直接向打印机发送文本数据即可打印纯文本内容。注意发送PDF/图片时会导致乱码。</li>
<li>FTP/SMB: 这些是常见的文件共享协议，也可以用于向打印机传递文件。</li>
</ul>
<p>还有一些其他的，例如WSD协议等，也可以用于打印，本人没有使用过，不太了解不做介绍。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="关于fuji-xerox-docuprint-cm305-df">关于Fuji Xerox DocuPrint CM305 df<a href="https://ribombalt.github.io/blog/2025/05/15/printer#%E5%85%B3%E4%BA%8Efuji-xerox-docuprint-cm305-df" class="hash-link" aria-label="关于Fuji Xerox DocuPrint CM305 df的直接链接" title="关于Fuji Xerox DocuPrint CM305 df的直接链接">​</a></h3>
<p>这是一款激光打印机，可以用网线连接校园网进行网络打印（但不支持连接Wifi），也可以接USB线接电脑打印，也可以插U盘在控制面板上选择文件打印。（需要注意对大部分打印机管理软件，USB连接的打印机和网络打印机都是两台不同的打印机）。本文将以介绍网络打印为主，但可能部分设置也适用于USB打印。</p>
<blockquote>
<p>这款打印机已经比较老旧了，一些驱动程序等已经不再分发了。目前维护手册可以<a href="https://m1support-fb.fujifilm.com/driver_downloads/DocuPrint%20CM305%20df%20User%20Guide%20(TC).pdf" target="_blank" rel="noopener noreferrer">从官网下载</a>。<a href="https://www.manualslib.com/manual/543534/Fuji-Xerox-Docuprint-Cm305-Df.html" target="_blank" rel="noopener noreferrer">manuallibs</a>上可以在线预览手册。</p>
</blockquote>
<p>直接访问打印机所在IP地址，可以进入在线的Centerware Internet Services进行配置。其中，【属性】下面包括了大部分设置，【打印机】下也有少量其他设置。</p>
<p><img decoding="async" loading="lazy" alt="frameprop" src="https://ribombalt.github.io/assets/images/printer-settings-73d99ec53c99ee7abde086c825b1fcba.png" width="203" height="718" class="img_ev3q"></p>
<p>其中一些比较重要的设置：</p>
<ul>
<li>端口启动：表示开放了那些端口。部分不需要的服务可以关闭以减小风险。</li>
<li>机器管理员设定：设置管理员名称、密码。</li>
<li>IP地址限制：内置的防火墙功能，可以限制一部分IP地址访问。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-各系统下具体配置">2. 各系统下具体配置<a href="https://ribombalt.github.io/blog/2025/05/15/printer#2-%E5%90%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="2. 各系统下具体配置的直接链接" title="2. 各系统下具体配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="windows">Windows<a href="https://ribombalt.github.io/blog/2025/05/15/printer#windows" class="hash-link" aria-label="Windows的直接链接" title="Windows的直接链接">​</a></h3>
<p>Windows下，需要安装打印机驱动。fujifilm官网事实上已经停止提供这个型号的驱动，但是可以装高一个版本的CM405 df的驱动，<a href="https://support-fb.fujifilm.com/processDriverForm.do?ctry_code=SG&amp;lang_code=en&amp;d_lang=en&amp;corp_pid=DPCM405DF&amp;rts=null&amp;model=DocuPrint+CM405+df&amp;type_id=2&amp;oslist=Windows+11+64bit&amp;lang_list=zh_CN" target="_blank" rel="noopener noreferrer">下载地址</a></p>
<p>接下来需要添加打印机。根据打印机本身设置，可以选择添加IPP或LPR打印机，这两种仅仅是和打印机的不同通讯方式，效果是等价的，任选其一即可。</p>
<p>对于IPP打印机：</p>
<ul>
<li>设置中搜索【添加打印机或扫描仪】，点击添加设备。</li>
<li>正常情况下扫描不到设备，过一段时间出现【手动添加】，点进去。</li>
<li>二选一：<!-- -->
<ul>
<li>如果添加IPP打印机：<!-- -->
<ul>
<li>【按名称选择共享打印机】：输入<code>http://&lt;打印机IP地址&gt;/ipp</code></li>
</ul>
</li>
<li>如果添加LPR打印机：<!-- -->
<ul>
<li>【手动设置】-【创建新端口】-【LPR Port】-填入打印机IP地址和打印机队列名称（队列名可以任意填写）。</li>
</ul>
</li>
</ul>
</li>
<li>添加打印机后需要选择打印机驱动，左边选<code>FUJIFILM</code>，右边选择唯一的<code>FF K519p for Docuprint CM405 df PCL6</code>，点击下一步。</li>
</ul>
<p>后面可以一路完成。</p>
<blockquote>
<p>注意：如果打印机设置中，启用了【打印用户限制】，即使【允许非指定用户打印】是开启的，以下步骤也是必须的。</p>
</blockquote>
<ul>
<li>在打印机设置中，点进刚刚添加的打印机，点【打印机属性】</li>
<li>在【配置】选项卡，【账户管理】，账户管理办法选择【无】</li>
</ul>
<p>之后就可以正常打印了。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="macos">MacOS<a href="https://ribombalt.github.io/blog/2025/05/15/printer#macos" class="hash-link" aria-label="MacOS的直接链接" title="MacOS的直接链接">​</a></h3>
<p>Mac OS 不需要安装驱动。</p>
<p>在系统默认的打印机设置中，可以添加打印机。</p>
<p>TODO</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="linux-以manjaro为例">Linux (以Manjaro为例)<a href="https://ribombalt.github.io/blog/2025/05/15/printer#linux-%E4%BB%A5manjaro%E4%B8%BA%E4%BE%8B" class="hash-link" aria-label="Linux (以Manjaro为例)的直接链接" title="Linux (以Manjaro为例)的直接链接">​</a></h3>
<p>TODO</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="android以huawei为例">Android（以Huawei为例）<a href="https://ribombalt.github.io/blog/2025/05/15/printer#android%E4%BB%A5huawei%E4%B8%BA%E4%BE%8B" class="hash-link" aria-label="Android（以Huawei为例）的直接链接" title="Android（以Huawei为例）的直接链接">​</a></h3>
<p>TODO</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-管理员配置">3. 管理员配置<a href="https://ribombalt.github.io/blog/2025/05/15/printer#3-%E7%AE%A1%E7%90%86%E5%91%98%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="3. 管理员配置的直接链接" title="3. 管理员配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="安全问题">安全问题<a href="https://ribombalt.github.io/blog/2025/05/15/printer#%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98" class="hash-link" aria-label="安全问题的直接链接" title="安全问题的直接链接">​</a></h3>
<p>将打印机暴露在校园网公网里有安全风险，主要包括：</p>
<ul>
<li>未授权访问。简单来说，没有防火墙的情况下，任何人扫描到这个端口都可以发送大量打印请求，导致打印机运行大量的打印任务，浪费纸张油墨，甚至导致打印机卡死。</li>
<li>信息泄露：访问管理员面板可以看到打印机使用记录、配置信息等。</li>
<li>可能包含漏洞的服务：如果打印机固件存在更严重漏洞，可能导致远程代码执行等问题。</li>
</ul>
<p>安全建议：</p>
<ul>
<li>如果可以，建议将打印机放在局域网中，例如无线路由器下，需要打印时连接到路由器的Wifi后进行打印。</li>
<li>关闭不需要的打印服务。如果没有特殊需求，建议只保留LPR和IPP服务。<!-- -->
<ul>
<li>尤其是关闭9100端口。这个端口外部发进来就是直接打印纯文本。已经见到有人扫出这个端口然后当一般Web服务去fuzz攻击，导致打印机打出一堆恶意HTTP请求，非常难绷。</li>
</ul>
</li>
<li>修改管理员密码<!-- -->
<ul>
<li>打印机默认账户和密码直接被写在维护手册，任何人都可以开放获取。获得管理员密码后任何人都可以修改打印机后台设置。</li>
</ul>
</li>
<li>如有需要，可以限制IP地址范围</li>
<li>如果可以，建议正确配置用户认证功能，并关闭无验证打印。<!-- -->
<ul>
<li>目前还不清楚如何为打印机添加可打印的用户，因此目前是允许无验证打印的。</li>
<li>对应设置在打印机管理页面的【打印机-打印用户限制】下</li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>Hardware</category>
            <category>Linux</category>
            <category>Windows</category>
        </item>
        <item>
            <title><![CDATA[WSL2 CUDA禁用共享内存]]></title>
            <link>https://RibomBalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu</link>
            <guid>https://RibomBalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu</guid>
            <pubDate>Sun, 20 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR;]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR;<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#tldr" class="hash-link" aria-label="TL;DR;的直接链接" title="TL;DR;的直接链接">​</a></h2>
<ul>
<li>对于双显卡设备，当N卡显存不够用时，会使用集显提供的共享显存，会显著降低性能。</li>
<li>可以通过<code>torch.cuda.set_per_process_memory_fraction(1.0, 0)</code>在torch模块中禁用共享显存。</li>
<li>禁用共享显存会导致专用显存报错时直接退出而不是保持运行，出现共享显存问题首先应该调参减小模型显存占用。</li>
</ul>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2>
<p>这个问题是在玩<code>fish-speech</code> TTS模型时遇到的。我的NVIDIA RTX 4060Ti只有8GB显存，对模型微调时显存爆了，任务管理器可以看到使用了共享显存，并且运行速度非常慢。当我减小<code>batch_size</code>，减少显存占用后，所有显存均使用的N卡的显存，这时运行速度是正常的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="诊断">诊断<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#%E8%AF%8A%E6%96%AD" class="hash-link" aria-label="诊断的直接链接" title="诊断的直接链接">​</a></h2>
<p>首先，通过问<code>QwQ-32B</code>，得到了如下测试代码，可以用<code>nvcc -o test test.cu</code>编译：</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;unistd.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">size_t</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 超出显存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">float</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">d_ptr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">size_t</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">cudaMallocManaged</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">d_ptr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 抛出错误而非回退</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"alloc GB: %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">usleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2000000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>上述代码在WSL2下运行时会<strong>只使用共享显存，即使仍然有大量的专用显存</strong>，这一点非常奇怪，暂时不明原因。AI还告诉我似乎有两个环境变量<code>CUDA_VISIBLE_DEVICES</code>和<code>CUDA_MANAGED_FORCE_DEVICE_ALLOC </code>可以限制只使用设备内存，我找到了对应的<a href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gd228014f19cc0975ebe3e0dd2af6dd1b" target="_blank" rel="noopener noreferrer">CUDA文档说明</a>，但我测试下来WSL2下不生效。</p>
<blockquote>
<p>值得注意的是，CUDA设备是32bit的（这一点存疑，但是编译期确实出现了overflow），<code>size_t</code>是<code>unsigned long int</code>，是32位的，所以单次分配不能超过4GB，这里是每次分配1GB实现的。<code>cudaMallocManaged</code>分配的内存将由CUDA自主管理，不需要我们释放。</p>
</blockquote>
<p>不过后来我意识到其实更应该直接在<code>torch</code>中测试，而不是手动编译CUDA kernel。可以用更简单的代码：</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> torch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> torch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ones</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dtype</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">torch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">uint8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> device</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'cuda'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当分配显存大于剩余专用显存时，如果禁用fallback，这里会报错；否则会使用共享显存正常运行退出。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方案">解决方案<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="hash-link" aria-label="解决方案的直接链接" title="解决方案的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="windows下运行cuda">Windows下运行CUDA<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#windows%E4%B8%8B%E8%BF%90%E8%A1%8Ccuda" class="hash-link" aria-label="Windows下运行CUDA的直接链接" title="Windows下运行CUDA的直接链接">​</a></h3>
<p>首先，可以通过修改NVIDIA控制面板，在全局/指定程序设置的<code>CUDA - Sysmem Fallback Policy （系统内存回退政策）</code>，改为偏好无回退（这个选项需要中译中，英文应该是<code>no fallback</code>，也就是设备显存爆了不会妥协用共享显存的意思）。在<a href="https://www.yuque.com/baicaigongchang1145haoyuangong/ib3g1e/sygaxbdd71zp6945" target="_blank" rel="noopener noreferrer">GPT-SoVITS的文档</a>也提到了这个事情。</p>
<p>这个方案适用于Windows下运行的CUDA程序（包括调用了CUDA的<code>torch</code>），适用于Windows端的代码/整合包。但我更倾向于在WSL2中跑模型，因此这个方案不适用。事实上，N卡控制面板无法选中WSL中的程序。而在我之前的测试中，WSL2上运行的CUDA并不遵守控制面板的设置，这个问题其他人也遇到过，参加<a href="https://github.com/microsoft/WSL/issues/11050" target="_blank" rel="noopener noreferrer">微软WSL仓库的 issue</a>，目前仍是open状态。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wsl2中解决方案">WSL2中解决方案<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#wsl2%E4%B8%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="hash-link" aria-label="WSL2中解决方案的直接链接" title="WSL2中解决方案的直接链接">​</a></h3>
<p>上述issue中提到，<code>torch</code>中可以通过设置解决：</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">torch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cuda</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">set_per_process_memory_fraction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1.0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>推测纯CUDA C代码也可以通过某些设置解决（看起来就是调用<code>setMemoryFraction</code>函数），对Python torch模块来说，直接在第一次分配显存前加这句话就可以了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="comment">Comment<a href="https://ribombalt.github.io/blog/2025/04/20/disable-nvidia-shared-gpu#comment" class="hash-link" aria-label="Comment的直接链接" title="Comment的直接链接">​</a></h2>
<blockquote>
<p>灵魂之问：为什么要关闭共享显存？</p>
</blockquote>
<p>关闭共享显存意味着显存不够时会直接报错退出而不是用共享显存低速运行。事实上直接报错和共享显存下运行对于模型训练来说几乎是同等严重程度的不可用状态，某种程度上前者可能更糟糕一些（因为程序稳定性差了，想象一下最后1%突然爆显存了，是比较慢的跑完好，还是直接报错前面白跑比较好）。</p>
<p>出现这个问题本质上还是显存不够用了，需要做的是减小在运行程序的显存占用，包括关闭无关程序，调整训练超参。比如我是在微调时遇到这个问题的，解决方案是把batch_size减小，当独显显存够用之后这个选项其实是没有影响的。目前没有测试过这个选项能否让模型更优先地使用设备专用显存（我推测不会）。</p>]]></content:encoded>
            <category>Linux</category>
            <category>WSL2</category>
            <category>AI</category>
        </item>
        <item>
            <title><![CDATA[Linux下使用Intel无线网卡同时连接网络和建立热点]]></title>
            <link>https://RibomBalt.github.io/blog/2025/04/16/iwlwifi-hotspot</link>
            <guid>https://RibomBalt.github.io/blog/2025/04/16/iwlwifi-hotspot</guid>
            <pubDate>Wed, 16 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR;]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR;<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#tldr" class="hash-link" aria-label="TL;DR;的直接链接" title="TL;DR;的直接链接">​</a></h2>
<ul>
<li>最近的Intel无线网卡内置了LAR（Location Awareness Regulatory，位置感知管控）功能，通过主动探测周围信道设置Wifi的地区码，以规避雷达等设施，遵守所在地区的无线信道法律规定。</li>
<li>然而，LAR功能在很多情况下不能正常工作，无法正确设置地区码，而默认值00是最严格的限制，在5GHz信号段没有任何一个信道可以建立热点通信。</li>
<li>2019年的Linux 5.5前，intel网卡驱动<code>iwlwifi</code>存在一个选项<code>lar_disable</code>可以禁用LAR功能，然而有报道表明这个选项会导致固件崩溃，因此在5.5版本被移除。尽管可以通过内核补丁把选项重新打入，本人测试并未成功开启热点。</li>
<li>本文使用了另一个补丁，似乎直接绕过了LAR设置的信道标志，可以实现在LAR设置不正确的情况下能够在特定5GHz信道发射，从而能够同时连接和建立无线热点。</li>
</ul>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2>
<p>由于实在受不了笔记本的Win10天天催我更新，我最终给笔记本装了Linux双系统。经过一系列调研后，最终选择了Arch衍生的Manjaro发行版，配合KDE桌面。</p>
<p>然而一段时间使用后，我发现Linux KDE上的网络管理面板中，只要连接了5GHz Wi-fi，创建热点的按钮就会消失。而对于相同的网卡，使用Windows启动时，可以建立5GHz热点。</p>
<p>根据Arch Linux wiki上关于<a href="https://wiki.archlinux.org/title/Software_access_point" target="_blank" rel="noopener noreferrer">软件无线接入点</a>的讨论，有几个关键点：</p>
<ul>
<li>原理上建立热点分为两步：提供Wifi连接层，转发网络包。<!-- -->
<ul>
<li>前者通过<code>hostapd</code>实现，与KDE默认管理网络的<code>NetworkManager</code>可能有一定冲突，<a href="https://unix.stackexchange.com/a/584952/600864" target="_blank" rel="noopener noreferrer">这个问答</a>进行了一些解释。</li>
<li>后者通过<code>dnsmasq</code>、<code>iptables</code>实现，需要提供主动的DHCP和DNS服务。</li>
</ul>
</li>
<li>上述建立热点功能在Arch系包管理中由<code>linux-wifi-hostspot</code>提供，这个包还提供了一个<code>create_ap</code>shell脚本，和<code>wihotspot</code> GUI。<!-- -->
<ul>
<li>不言自明，<code>create_ap</code>是基于<code>hostapd</code>的，与<code>NetworkManager</code>有一定冲突。</li>
<li>据说前者2015年左右停止维护；而后者仍在维护（主要关注GUI），但和KDE自带的网络管理是两套系统。</li>
</ul>
</li>
<li>Intel网卡因为LAR位置感知管控（以及一些固件驱动BUG）的原因，难以在Linux下建立5GHz热点。这个后面会详细介绍。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="设备信息诊断">设备信息、诊断<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%E8%AF%8A%E6%96%AD" class="hash-link" aria-label="设备信息、诊断的直接链接" title="设备信息、诊断的直接链接">​</a></h2>
<p>我的设备基本信息：</p>
<ul>
<li>设备：联想小新Air14-2020 Intel款</li>
<li>网卡：Intel Wireless AC 9560</li>
<li>OS: Manjaro (Linux 6.12.21) 与Windows 11双系统。</li>
<li>桌面系统：KDE Plasma 6 (X11)<!-- -->
<ul>
<li>KDE内置的网络管理插件是<code>plasma-nm</code>，基于<code>NetworkManager</code></li>
</ul>
</li>
</ul>
<p>通过<code>iw list</code>工具可以获得更多信息。</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ iw list | grep -A 5 valid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	valid interface combinations:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* #{ managed } &lt;= 1, #{ P2P-client, P2P-GO } &lt;= 1, #{ P2P-device } &lt;= 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				total &lt;= 3, #channels &lt;= 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* #{ managed } &lt;= 1, #{ AP, P2P-client, P2P-GO } &lt;= 1, #{ P2P-device } &lt;= 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				total &lt;= 3, #channels &lt;= 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	HT Capability overrides:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意这里的<code>AP</code>表示热点模式。
说明9560网卡可以在两种模式下工作：双频STA+P2P，或者单频STA+P2P+AP。其中后者是我们关心的情况，可以先连接外部wifi再提供热点，并且占用同一信道。</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ iw list | grep -A 15 Freq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		Frequencies:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2412.0 MHz [1] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2417.0 MHz [2] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2422.0 MHz [3] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2427.0 MHz [4] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2432.0 MHz [5] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2437.0 MHz [6] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2442.0 MHz [7] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2447.0 MHz [8] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2452.0 MHz [9] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2457.0 MHz [10] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2462.0 MHz [11] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2467.0 MHz [12] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2472.0 MHz [13] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">				* 2484.0 MHz [14] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Band 2:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		Frequencies:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5180 MHz [36] (22.0 dBm) (no IR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5200 MHz [40] (22.0 dBm) (no IR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5220 MHz [44] (22.0 dBm) (no IR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5240 MHz [48] (22.0 dBm) (no IR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5260 MHz [52] (22.0 dBm) (no IR, radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5280 MHz [56] (22.0 dBm) (no IR, radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5300 MHz [60] (22.0 dBm) (no IR, radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5320 MHz [64] (22.0 dBm) (no IR, radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5340 MHz [68] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5360 MHz [72] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5380 MHz [76] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5400 MHz [80] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5420 MHz [84] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5440 MHz [88] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            * 5460 MHz [92] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这些表示9560网卡目前可以发射的频段。前一部分结果是2.4GHz，后一部分是5GHz波段。在打补丁之前，所有5GHz波段都标注了<code>(no IR)</code>，表明这个波段无法进行主动发射，也就无法建立热点。</p>
<p>为什么会无法发射呢？这并非因为网卡物理上不支持，而是为了规避各国规定的禁止发射的波段（见<a href="https://en.wikipedia.org/wiki/List_of_WLAN_channels" target="_blank" rel="noopener noreferrer">wikipedia: List of WLAN channels</a>）。</p>
<p>为了（给一般网卡）提供地区码设置选项，Arch系需要安装<code>wireless-regdb</code>（即debian系的crda包），包含了WLAN允许波段的数据库。Wifi的地区码可以通过<code>iw reg get</code>查看，并可以通过<code>iw reg set [code]</code>进行设置。</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ iw reg get</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">global</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">country CN: DFS-FCC</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (2400 - 2483 @ 40), (N/A, 20), (N/A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5150 - 5250 @ 80), (N/A, 23), (N/A), NO-OUTDOOR, AUTO-BW</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5250 - 5350 @ 80), (N/A, 20), (0 ms), NO-OUTDOOR, DFS, AUTO-BW</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5725 - 5850 @ 80), (N/A, 33), (N/A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (57240 - 59400 @ 2160), (N/A, 28), (N/A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (59400 - 63720 @ 2160), (N/A, 44), (N/A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (63720 - 65880 @ 2160), (N/A, 28), (N/A)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">phy#0 (self-managed)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">country 00: DFS-UNSET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (2402 - 2437 @ 40), (6, 22), (N/A), AUTO-BW, NO-HT40MINUS, NO-80MHZ, NO-160MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (2422 - 2462 @ 40), (6, 22), (N/A), AUTO-BW, NO-80MHZ, NO-160MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (2447 - 2482 @ 40), (6, 22), (N/A), AUTO-BW, NO-HT40PLUS, NO-80MHZ, NO-160MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5170 - 5190 @ 80), (6, 22), (N/A), NO-OUTDOOR, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5190 - 5210 @ 80), (6, 22), (N/A), NO-OUTDOOR, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5210 - 5230 @ 80), (6, 22), (N/A), NO-OUTDOOR, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5230 - 5250 @ 80), (6, 22), (N/A), NO-OUTDOOR, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5250 - 5270 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5270 - 5290 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5290 - 5310 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5310 - 5330 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5490 - 5510 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5510 - 5530 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5530 - 5550 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5550 - 5570 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5570 - 5590 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5590 - 5610 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5610 - 5630 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5630 - 5650 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5650 - 5670 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5670 - 5690 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5690 - 5710 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5710 - 5730 @ 80), (6, 22), (0 ms), DFS, AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5735 - 5755 @ 80), (6, 22), (N/A), AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5755 - 5775 @ 80), (6, 22), (N/A), AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5775 - 5795 @ 80), (6, 22), (N/A), AUTO-BW, NO-HT40MINUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5795 - 5815 @ 80), (6, 22), (N/A), AUTO-BW, NO-HT40PLUS, NO-160MHZ, NO-320MHZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (5815 - 5835 @ 20), (6, 22), (N/A), AUTO-BW, NO-HT40MINUS, NO-HT40PLUS, NO-80MHZ, NO-160MHZ, NO-320MHZ</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可以发现intel网卡设备<code>phy0</code>的地区设置为00（DFS-UNSET）。</p>
<p>但当我们尝试使用<code>iw reg set CN</code>时，网卡的地区设置没有发生任何变化！这是因为这个设备上面标记了<code>self-managed</code>，表明这个设备的地区码由自己管理（也就是LAR机制），不能被用户设置。一般来说，操作系统可以通过驱动设置网卡的地区码，但是Intel采用了一套LAR位置感知管控机制，会主动探测周围的无线信号，确定目前处于哪个地区。</p>
<p>然而网卡地区返回00，说明LAR并没有正确设置地区码，这也是很多人遇到过的BUG。当LAR出错时，会回到默认的00设置，这个设置几乎是各国禁止波段的交集，在5GHz波段没有任何一个波段是允许<code>IR</code>（no initiating radiation），也就无法建立热点。值得一提的是，这个问题很早应该就被提出了，但intel一直没有去修（曾经看到intel的forum被喷了十几楼，现在找不到了）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lar_disable"><code>lar_disable</code><a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#lar_disable" class="hash-link" aria-label="lar_disable的直接链接" title="lar_disable的直接链接">​</a></h2>
<p>在早期Linux Kernel中，Intel Wifi驱动<code>iwlwifi</code>存在一个内核选项<code>lar_disable</code>，可以禁用LAR功能。可以通过这个设置启动这一功能（重启生效）。</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># /etc/modprobe.d/iwlwifi.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">options lar_disable=1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然而在Linux 5.5之后，由于这个选项经常导致固件crash，Linux驱动开发组决定<a href="https://bugzilla.kernel.org/show_bug.cgi?id=205695#c6" target="_blank" rel="noopener noreferrer">直接移除这个选项</a>……这种踢皮球的态度显然不能让intel网卡用户满意，于是又被喷了十几楼……</p>
<p>在AUR（Archlinux User Repository）中，有一个包<code>iwlwifi-lar-disable-dkms</code>，可以把<code>lar_disable</code>选项加回来。</p>
<p>首先简单解释什么是dkms：DKMS表示<a href="https://wiki.archlinux.org/title/Dynamic_Kernel_Module_Support" target="_blank" rel="noopener noreferrer">动态内核模组支持</a>，可以通过pacman包管理工具把一些不属于原始内核源码的模组打进去，这类包每次安装和卸载时都需要重新编译内核模块。</p>
<p>具体到<code>iwlwifi-lar-disable-dkms</code>这个包，其<code>PKGBUILD</code>表明了安装过程：首先拉下内核源码，验证checksum后，应用补丁，编译成包，再通过<code>dkms</code>相关命令打到内核中去。</p>
<p>这个包直接打进我的系统是无法安装成功的。我检查了一下<code>make.log</code>，发现主要是因为内核版本的问题。这个包最新的commit内核版本未<code>6.13.2</code>，我回退到了上一个版本<code>6.12.4</code>，此时编译的报错只剩一个，应该是某个函数声明减少了一个传入参数，把这个部分patch掉就可以成功编译，表现为安装耗时大幅变长，重启后可以生效。</p>
<blockquote>
<p>这里也简单说一下如何patch的。把AUR的git仓库clone下来后，checkout到对应版本，第一次编译使用<code>makepkg -si</code>，会自动下载安装依赖并安装。如果安装失败，报错中会展示编译时<code>make.log</code>的地址，用于debug。
之后如果需要进一步修改源码，可以直接修改<code>src</code>目录下的内容，然后使用<code>makepkg -ei</code>。具体可以看<a href="https://wiki.archlinux.org/title/Patching_packages" target="_blank" rel="noopener noreferrer">archlinux wiki: Patch Package</a>
另外，dkms打入系统似乎需要在包管理工具中安装特定版本的<code>linux-headers</code>。可以看<a href="https://forum.manjaro.org/t/root-tip-how-to-kernel-headers-dkms/93840" target="_blank" rel="noopener noreferrer">manjaro forum的介绍</a>。</p>
</blockquote>
<p>很不幸的，即使启用了<code>lar_disable</code>选项，也无法设置地区码。<code>dmesg</code>中出现了新的log：<code>Conflict between TLV &amp; NVM regarding enabling LAR</code>，看起来一部分选项要求内核启用LAR一部分要求禁用，产生了矛盾。</p>
<p>值得一提的是，我也尝试了另一个固件<code>cfg80211</code>的内核选项<code>options cfg80211 ieee80211_regdom=CN</code>，没有成功，推测这个功能和<code>iw reg set CN</code>等效。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改自己的内核补丁">修改自己的内核补丁<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#%E4%BF%AE%E6%94%B9%E8%87%AA%E5%B7%B1%E7%9A%84%E5%86%85%E6%A0%B8%E8%A1%A5%E4%B8%81" class="hash-link" aria-label="修改自己的内核补丁的直接链接" title="修改自己的内核补丁的直接链接">​</a></h2>
<p>在继续调研的过程中，我发现了<a href="https://askubuntu.com/questions/1484841/ubuntu22-cant-create-5g-hotspot?newreg=a7f7c006bbc74615af1feceecf4cdc9a" target="_blank" rel="noopener noreferrer">这个问答贴</a>，和我设备情况相似，但声称使用了另一个补丁，并且成功了：</p>
<div class="language-patch codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-patch codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">diff --git a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">index 149857f..f45c0cb 100644</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--- a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+++ b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ -380,6 +380,8 @@ static int iwl_init_channel_map(struct device *dev, const struct iwl_cfg *cfg,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        ch_flags =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                __le16_to_cpup((const __le16 *)nvm_ch_flags + ch_idx);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+               ch_flags |= NVM_CHANNEL_IBSS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+               ch_flags |= NVM_CHANNEL_ACTIVE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (band == NL80211_BAND_5GHZ &amp;&amp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    !data-&gt;sku_cap_band_52ghz_enable)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ -1601,6 +1603,8 @@ iwl_parse_nvm_mcc_info(struct device *dev, const struct iwl_cfg *cfg,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                band = iwl_nl80211_band_from_channel_idx(ch_idx);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                center_freq = ieee80211_channel_to_frequency(nvm_chan[ch_idx],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                             band);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+               ch_flags |= NVM_CHANNEL_IBSS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+               ch_flags |= NVM_CHANNEL_ACTIVE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new_rule = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (!(ch_flags &amp; NVM_CHANNEL_VALID)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个补丁从功能来看，似乎在某一步直接给信道的标志位设置了可以发射，绕过了地区检测。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用体验">使用体验<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C" class="hash-link" aria-label="使用体验的直接链接" title="使用体验的直接链接">​</a></h2>
<p><code>iw list | grep -A 15 Freq</code>可以发现5GHz波段已经不再有<code>no-IR</code>标志（即使是radar detection的波段）。需要小心，不能使用这些雷达波段。</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Frequencies:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5180.0 MHz [36] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5200.0 MHz [40] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5220.0 MHz [44] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5240.0 MHz [48] (22.0 dBm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5260.0 MHz [52] (22.0 dBm) (radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5280.0 MHz [56] (22.0 dBm) (radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5300.0 MHz [60] (22.0 dBm) (radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5320.0 MHz [64] (22.0 dBm) (radar detection)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5340.0 MHz [68] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5360.0 MHz [72] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5380.0 MHz [76] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5400.0 MHz [80] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5420.0 MHz [84] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5440.0 MHz [88] (disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	* 5460.0 MHz [92] (disabled)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当然<code>iw reg get</code>结果仍然保持不变，不过似乎不会生效了。</p>
<p>无法在<code>NetworkManager</code>中直接添加热点，这是因为我们的网卡最多只能支持一个<code>managed</code>设备，然而可以使用<code>wihotspot</code>，直接建立热点，它会自动新建一个<code>Network Interface</code>，标记为<code>__ap</code>模式，设置<code>NetworkManager</code>对这个设备<code>unmanaged</code>。底层原理讨论见<a href="https://wiki.archlinux.org/title/Talk:Software_access_point" target="_blank" rel="noopener noreferrer">讨论3</a>。理论上在命令行中用<code>iw dev add</code>和<code>create_ap</code>也是可以的，但我目前还没有成功过。</p>
<p>目前使用还算正常，似乎没遇到网络模块crash的情况。偶尔会在<code>dmesg</code>中看到<code>iwlwifi</code>相关的额外报错，可能这是不稳定的表现吧。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2025-04-18-更新">2025-04-18 更新<a href="https://ribombalt.github.io/blog/2025/04/16/iwlwifi-hotspot#2025-04-18-%E6%9B%B4%E6%96%B0" class="hash-link" aria-label="2025-04-18 更新的直接链接" title="2025-04-18 更新的直接链接">​</a></h3>
<p>出现了一次KDE桌面未响应，看journalctl是kernel空指针异常，发生在NetworkManager中。强制关机之前，看NetworkManager进程未响应（D），无法在控制台中sudo，无法唤起KDE桌面的面板。最终是通过强制关机解决的。</p>
<p>看来固件crash的问题是确实存在的，为了稳定性暂时卸载这个补丁了，必须用的时候再打进去。</p>]]></content:encoded>
            <category>Linux</category>
            <category>Hardware</category>
            <category>Wifi</category>
        </item>
        <item>
            <title><![CDATA[首次自建MC服务器笔记]]></title>
            <link>https://RibomBalt.github.io/blog/2024/12/23/first-minecraft-server</link>
            <guid>https://RibomBalt.github.io/blog/2024/12/23/first-minecraft-server</guid>
            <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[需求]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="需求">需求<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E9%9C%80%E6%B1%82" class="hash-link" aria-label="需求的直接链接" title="需求的直接链接">​</a></h2>
<p>起因只是同课题组一起毕业的四五个小伙伴想一起约着开一个MC服玩玩。</p>
<p>不过我们偏好的平台不太统一，有电脑端有手机端，大部分人没有国际版正版，但我又想用自己的皮肤（所以尽可能不用网易版）。刚好手头有校园网环境内的云服务器。</p>
<p>经过一系列调研之后，最终选择Minecraft Java服务端 + Geyser（间歇泉）的方式，PC用户用Java端直连服务器，手机用户用携带版通过Geyser转发连接服务器。由于目前版本Geyser已经不支持外置登录，我们最终采用了关闭在线验证，离线登录+白名单的方式，虽然不够理想但是校园网+使用人数少，也不是不能接受。</p>
<p>主要流程可以参考<a href="https://doc.natfrp.com/offtopic/mc-geyser.html" target="_blank" rel="noopener noreferrer">Sakura Frp平台给出的教程</a>。但是毕竟平台不同，流程多少有些差别。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="基础配置">基础配置<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="基础配置的直接链接" title="基础配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="云服务器">云服务器<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8" class="hash-link" aria-label="云服务器的直接链接" title="云服务器的直接链接">​</a></h3>
<p>配置如下：</p>
<ul>
<li>Ubuntu 22.04 LTS (x86_64)</li>
<li>虚拟CPU 4个，内存4GB，存储40GB SSD，另有100GB HDD作为临时备份用</li>
</ul>
<p>作为服务器来说，内存略小，如果能扩到8GB会比较好。</p>
<p>服务器SSH设置略。一般在线服务还建议配置一个non-sudo用户专门运行。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="java环境安装">Java环境安装<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85" class="hash-link" aria-label="Java环境安装的直接链接" title="Java环境安装的直接链接">​</a></h3>
<p>可以用官方软件源的openjdk 21</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt install openjdk-21-jdk-headless</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>headless 表示无图形界面</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="minecraft-java服务端">Minecraft Java服务端<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#minecraft-java%E6%9C%8D%E5%8A%A1%E7%AB%AF" class="hash-link" aria-label="Minecraft Java服务端的直接链接" title="Minecraft Java服务端的直接链接">​</a></h3>
<p>首先建议先通读一遍<a href="https://doc.natfrp.com/offtopic/mc-java-server.html#prepar-core" target="_blank" rel="noopener noreferrer">服务器核心相关的科普</a>。</p>
<p>按照服务器能否支持插件或Mod，排列组合可以分为四类服务器核心。我们需要一定程度的定制性（可折腾），所以排除原版服务器。而定制化最高的Mod+插件服（比如CatServer）最复杂，坑也多，所以排除在外。最终是打算插件/Mod服二选一。</p>
<p>考虑到服务器性能羸弱，加上我们目前对Mod兴趣不大，我们最终还是用了插件服务器中的Paper。PaperMC在性能上有一些激进的优化（代价是优化掉了一些原版特性），一些服务器常用（扩展命令、皮肤）可以直接借助插件实现，比较适合我们的场景。</p>
<p>Minecraft版本方面，我们最终使用了最新的1.21.4。这点可能有点欠考虑，因为Paper核心本身还处于dev build，不够稳定，而且大部分插件的兼容性还没到这个版本。不过，我发现插件对版本的需求没有Mod那么严格，往往好几个大版本前的插件现在还能用（也可能我用的插件修改程度比较浅）。</p>
<p>可以直接从官网下载<a href="https://papermc.io/downloads/paper" target="_blank" rel="noopener noreferrer">PaperMC的JAR包</a>。</p>
<p>下载后，用以下指令启动服务器</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">java -Xms2G -Xmx2G -jar paper.jar --nogui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>其中<code>-Xms</code>后面的是Java的启动内存，<code>-Xmx</code>是最大内存。</li>
<li>建议在tmux中运行，保证SSH退出后服务器仍在后台运行。</li>
<li>可以启动命令写成一个名为<code>launch.sh</code>的shell脚本，然后<code>chmod +x launch.sh</code>赋予执行权限。</li>
</ul>
<p>第一次运行时必然会报错退出，需要同意EULA规约，即把<code>eula.txt</code>中设置改为<code>true</code>。</p>
<p>与此同时，可以在<code>server.properties</code>中改一些配置：</p>
<div class="language-conf codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-conf codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 离线模式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">online-mode=false </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># motd影响搜出服务器时显示的名称</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">motd=xxxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 应群友要求关闭了友伤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pvp=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 给大伙上上强度.jpg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">difficulty=hard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 同服最大玩家数量，稍微留了点余量方便开小号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max-players=8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>为了保证关闭云服务器SSH后服务端还在后台运行，我是把<code>launch.sh</code>跑在tmux里的。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="geyser---连通基岩版�和java版">Geyser - 连通基岩版和Java版<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#geyser---%E8%BF%9E%E9%80%9A%E5%9F%BA%E5%B2%A9%E7%89%88%E5%92%8Cjava%E7%89%88" class="hash-link" aria-label="Geyser - 连通基岩版和Java版的直接链接" title="Geyser - 连通基岩版和Java版的直接链接">​</a></h3>
<p><a href="https://geysermc.org/" target="_blank" rel="noopener noreferrer">Geyser</a>（间歇泉）是一个知名的基岩版/Java版互通代理，它可以让基岩版用户加入Java服务器。</p>
<p>Geyser既可以作为Mod安装也可以作为插件安装。我们这里就直接参考了<a href="https://geysermc.org/wiki/geyser/setup/?host=self&amp;platform=paper-spigot" target="_blank" rel="noopener noreferrer">paper + self-hosted 安装教程</a>，直接把jar包下载到<code>plugins</code>文件夹，然后重新启动服务器，几乎不用改什么，就直接能用了（我们是默认端口）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="插件安装--非必须配置">插件安装 / 非必须配置<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85--%E9%9D%9E%E5%BF%85%E9%A1%BB%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="插件安装 / 非必须配置的直接链接" title="插件安装 / 非必须配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="指令权限插件essentialsx--luckperms--vault">指令/权限插件：EssentialsX + LuckPerms + Vault<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E6%8C%87%E4%BB%A4%E6%9D%83%E9%99%90%E6%8F%92%E4%BB%B6essentialsx--luckperms--vault" class="hash-link" aria-label="指令/权限插件：EssentialsX + LuckPerms + Vault的直接链接" title="指令/权限插件：EssentialsX + LuckPerms + Vault的直接链接">​</a></h3>
<p>这几个主要是为了<code>sethome</code>, <code>tpa</code>等常用服务器指令，可以在各自官网安装最新版（Vault最新版1.7.3虽然官网标称只支持到1.17，但最新版确实可以装上，没遇到什么问题）。</p>
<p>接下来需要手动为用户们添加执行特定指令的权限。权限系统比较复杂，我暂时没完全搞清楚，就参考了<a href="https://www.cnblogs.com/zhaojiedi1992/p/mc_plugins_ess.html" target="_blank" rel="noopener noreferrer">这篇博客</a>的配置，添加了两个新的组对应普通用户和VIP，并分别赋予权限（顺便VIP组我这里没有，需要我自己添加组别）。我没有找到批量执行指令的方式，所以我是在op控制台里一条一条输入的。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="皮肤插件skinsrestorer">皮肤插件：SkinsRestorer<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E7%9A%AE%E8%82%A4%E6%8F%92%E4%BB%B6skinsrestorer" class="hash-link" aria-label="皮肤插件：SkinsRestorer的直接链接" title="皮肤插件：SkinsRestorer的直接链接">​</a></h3>
<p><a href="https://skinsrestorer.net/docs" target="_blank" rel="noopener noreferrer">这个插件</a>是为了离线登录里支持皮肤。</p>
<p>不过这个插件确实不太省心，需要两处额外配置：</p>
<ul>
<li>第一次运行时会有warning，需要同意一个君子协定（大致意思是不能对【服务器玩家用自己的皮肤】收费），需要在<code>plugins/SkinsRestorer/config.yml</code>中找到<code>perSkinPermissionsConsent</code>一行，改成<code>'I will follow the rules'</code>。</li>
<li>这个插件可以用任何格式正确的外部图片作为皮肤，但是配置有一个<code>restricSkinUrls</code>选项，限制用户只能用特定域名下的图片。为了使用皮肤站的皮肤，需要添加对应皮肤站的域名（比如添加了<code>https://littleskin.cn</code>才能用littleskin的皮肤）</li>
</ul>
<p>之后大家就可以用<code>/skin set &lt;url&gt;</code>设置自己皮肤了。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="白名单">白名单<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E7%99%BD%E5%90%8D%E5%8D%95" class="hash-link" aria-label="白名单的直接链接" title="白名单的直接链接">​</a></h3>
<p>毕竟我们是离线登录，还是怕路人进来搞破坏，所以做了白名单机制。</p>
<p>需要在<code>server.properties</code>把<code>white-list</code>改为<code>true</code>，然后在op控制台中输入：<code>/whitelist add 用户名</code>就可以加白名单了，加好后需要<code>/whitelist reload</code>热更新，或者重启服务器。</p>
<p>白名单配置是写到<code>whitelist.json</code>文件的，包含用户名和UUID信息。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="日常维护">日常维护<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4" class="hash-link" aria-label="日常维护的直接链接" title="日常维护的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="服务端备份">服务端备份<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%87%E4%BB%BD" class="hash-link" aria-label="服务端备份的直接链接" title="服务端备份的直接链接">​</a></h3>
<p>目前看来需要备份的只有几个<code>world</code>文件夹和<code>plugins</code>文件夹。这个我就自己写了一个shell然后<code>crontab -e</code>加入定时执行。</p>
<p>包含了一个向tmux的特定窗口输入指令的snippets，以方便同时向服务器通知，是从stackoverflow抄来的。</p>
<p><code>sync.sh</code>把需要备份的文件转移到备份的文件夹中，可以传入一个参数，控制备份到哪个文件夹。</p>
<p>发现偶尔有死了回档的需求，所以我跑了两个cron，一个10min一次，一个1h一次。之后视情况还可能再加入更密集的cron，或者引入rotational机制。</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># select save target (default latest)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -z $1 ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    save_target=latest;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    save_target=$1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "save to $save_target"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BACKUP_TARGET=/home/minecraft/backup/minecraft_paper/${save_target}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SERVER_PATH=/home/minecraft/minecraft_paper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DIR_TO_BACKUP=(world world_nether world_the_end plugins)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILE_TO_BACKUP=(whitelist.json server.properties usercache.json permissions.yml bukkit.yml spigot.yml commands.yml help.yml ops.json version_history.json banned-ips.json banned-players.json sync.sh startup.sh launch.sh)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MINECRAFT_TMUX_WINDOW=minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmux send-keys -t $MINECRAFT_TMUX_WINDOW "$1" C-m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "say §o服务端备份启动 ($save_target) $(date)§r"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p $BACKUP_TARGET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "save-all"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "save-off"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for target in ${DIR_TO_BACKUP[@]}; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">do {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo new target dir: $target;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rsync --delete -avz "$SERVER_PATH/$target/" "$BACKUP_TARGET/$target";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for target in ${FILE_TO_BACKUP[@]}; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">do {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo new target file: $target;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rsync --delete -avz "$SERVER_PATH/$target" "$BACKUP_TARGET/$target";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">date &gt;"$BACKUP_TARGET/backup_date.txt"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "save-on"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "save-all"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "say §o服务端备份结束 $(date)§r"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>rotate_save.sh</code>可以把之前备份出来的文件打包压缩存储到别的地方，并可以rotate几个版本（每天凌晨运行）
（未来这部分打算SFTP远程存储的，只是存储服务器还没有，后面再说，目前是挂在nginx下面然后手动下载备份）</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BACKUP_TARGET=/home/minecraft/backup/minecraft_paper/latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ROTATE_LOCATION=/var/www/html/minecraft_backup/minecraft_paper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MAX_ROTATE=4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p $ROTATE_LOCATION</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for save_i in $(seq $(($MAX_ROTATE - 1)) -1 1); </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">do {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if [[ -f "$ROTATE_LOCATION/backup.tar.gz.${save_i}" ]];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    then {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mv "$ROTATE_LOCATION/backup.tar.gz.${save_i}" "$ROTATE_LOCATION/backup.tar.gz.$(($save_i + 1))"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fi;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -f "$ROTATE_LOCATION/backup.tar.gz" ]];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">then {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mv "$ROTATE_LOCATION/backup.tar.gz" "$ROTATE_LOCATION/backup.tar.gz.1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar cvzf "$ROTATE_LOCATION/backup.tar.gz" "$BACKUP_TARGET"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="状态监控">状态监控<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7" class="hash-link" aria-label="状态监控的直接链接" title="状态监控的直接链接">​</a></h3>
<p>2024-12-25发生了一次OOM事件，服务器无响应，SSH响应速度极慢，等oom_killer发力之后才恢复正常。事后诊断是因为java启动参数配置错误（当时只给了<code>-Xms</code>没给<code>-Xmx</code>）。</p>
<p>因此打算进行一定程度的CPU/内存/存储监控，所以装了<code>sar</code>，不过暂时没搞懂如何自动生成报告。</p>
<p>另外也考虑过是否启用supervisord自动重启，目前想法是暂时不用。因为我本人也是玩家，应该能随时监控状态；另外如果真的是OOM导致的无响应，supervisord也跑不起来。</p>
<p>此外，earlyoom在小内存机器会导致相当多的内存浪费，也会导致服务端被提前kill掉，增加不稳定因素。考虑到服务器暂时不跑别的服务，我还是打算相信<code>-Xmx</code>的控制内存的能力。</p>
<p>另外，我使用的<code>Paper 1.21</code>客户端内置<code>Spark</code>状态检测插件，可以查看游戏内CPU/内存占用情况。以下命令可以获取接下来10min的服务器状态并生成一份在线报告。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/spark profiler start --timeout 600</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="发送消息推送">发送消息推送<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81" class="hash-link" aria-label="发送消息推送的直接链接" title="发送消息推送的直接链接">​</a></h3>
<p>用<code>say</code>命令可以全服通告，<code>tell</code>命令可以对单人私信。</p>
<p>如何发送格式化消息（<a href="https://www.reddit.com/r/Minecraft/comments/r8xic/strikethrough_underline_and_italics_in_multiplayer/" target="_blank" rel="noopener noreferrer">原帖</a>）</p>
<blockquote>
<p>And how exactly do you make this formatting happen?
EDIT to summarize the answers in various comments:
On the server console, press Alt-6 to enter §, followed by one of these letters:</p>
<ul>
<li>l - bold</li>
<li>m - strikethrough</li>
<li>n - underline</li>
<li>o - italic</li>
<li>r - reset formatting</li>
</ul>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="自动重启">自动重启<a href="https://ribombalt.github.io/blog/2024/12/23/first-minecraft-server#%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF" class="hash-link" aria-label="自动重启的直接链接" title="自动重启的直接链接">​</a></h3>
<p>考虑到服务器存在崩溃的可能，为了快速恢复状态，加了一个简单的快速重启脚本</p>
<blockquote>
<p>其实就是之前启动脚本外面套了一层启动tmux的脚本，有一定通用性</p>
</blockquote>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MINECRAFT_TMUX_WINDOW=minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd /home/minecraft/minecraft_paper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmux new-session -d -t minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmux rename-window -t minecraft:0 minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmux send-keys -t $MINECRAFT_TMUX_WINDOW "$1" C-m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_command "./launch.sh"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>之后写一个<code>/etc/systemd/system/minecraft_server.service</code>文件，把tmux + server启动脚本添加为服务</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[Unit]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Description=Minecraft Server (Paper)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">After=network.target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Service]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type=forking</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStart=/home/minecraft/minecraft_paper/startup.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User=minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Group=minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Install]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WantedBy=multi-user.target</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>完成后，<code>sudo systemctl daemon-reload</code>，重载服务列表，再<code>sudo systemctl enable minecraft_server.service</code>设置为开机自启即可。（如果目前服务端还没有启动，可以加上<code>--now</code>同时启动服务）</p>
<p>之后看服务状态，发现是running:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ sudo systemctl status minecraft_server.service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">● minecraft_server.service - Minecraft Server (Paper)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Loaded: loaded (/etc/systemd/system/minecraft_server.service; enabled; vendor preset: enabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Active: active (running) since Wed 2024-12-25 14:31:01 CST; 22h ago</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Process: 880 ExecStart=/home/minecraft/minecraft_paper/startup.sh (code=exited, status=0/SUCCESS)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Main PID: 933 (tmux: server)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Tasks: 109 (limit: 4641)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Memory: 2.8G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CPU: 3h 54min 9.656s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     CGroup: /system.slice/minecraft_server.service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─ 933 tmux new-session -d -t minecraft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─ 952 -bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─1856 /bin/bash ./launch.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             └─1857 java -Xms2G -Xmx2G -jar paper.jar --nogui</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dec 25 14:31:00 ribom-server systemd[1]: Starting Minecraft Server (Paper)...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dec 25 14:31:01 ribom-server startup.sh[958]: can't find window: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dec 25 14:31:01 ribom-server systemd[1]: Started Minecraft Server (Paper).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>看起来这个<code>shell</code>脚本进程最终被子进程<code>tmux</code>创建进程替换。虽然没有完全理解为什么，但是这样不影响正常使用。</p>
<p>目前可以实现云服务控制台软重启后，minecraft server自动上线。</p>
<p>如果需要并非机器重启时服务进程杀死后server自动重启，还可以在上面服务里加上<code>Restart=always</code>，我后面视情况考虑要不要添加。</p>]]></content:encoded>
            <category>Linux</category>
            <category>Minecraft</category>
            <category>Game</category>
        </item>
        <item>
            <title><![CDATA[【待施工】]]></title>
            <link>https://RibomBalt.github.io/blog/1000/01/01/【待施工】</link>
            <guid>https://RibomBalt.github.io/blog/1000/01/01/【待施工】</guid>
            <pubDate>Wed, 01 Jan 1000 00:00:00 GMT</pubDate>
            <description><![CDATA[- MHW mod制作笔记]]></description>
            <content:encoded><![CDATA[<ul>
<li>MHW mod制作笔记</li>
<li>AI配音学习笔记</li>
<li>WebGAL llm puppet制作心得</li>
<li>Manjaro使用笔记</li>
<li>如何清理空间</li>
</ul>]]></content:encoded>
        </item>
    </channel>
</rss>